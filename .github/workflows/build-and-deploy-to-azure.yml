# This workflow is named "Build and Deploy to Azure"
name: Build and Deploy to Azure

# Specifies the event that triggers the workflow - in this case, a push event to the main branch.
on:
  push:
    branches:
      - main

# Defines two jobs: 'build-bicep' and 'deploy-bicep'.
jobs:

  # First job: Builds the Bicep file.
  build-bicep:
    # Specifies the type of runner (virtual machine) the job will run on.
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # Checks out a copy of your repository on the ubuntu-latest runner.
      - name: Checkout repository
        uses: actions/checkout@v2

      # Logs into Azure using the Azure CLI and the provided credentials.
      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Builds the Bicep file to generate the corresponding ARM template in JSON format.
      - name: Build Main Bicep
        run: |
          az bicep build -f ./infra/main.bicep
          # Checks the exit status of the last command (az bicep build). If it failed, it echoes an error message.
          if [ $? -ne 0 ]; then
            echo "Error building the Bicep file!"
            exit 1
          fi

      # Uploads the generated JSON file as an artifact for use in subsequent jobs.
      - name: Upload Main Bicep JSON
        uses: actions/upload-artifact@v2
        with:
          name: main-json
          path: ./infra/

      # Logs out of Azure to end the session.
      - name: Logout of Azure CLI
        run: az logout

  # Second job: Deploys the Bicep (JSON) to Azure. This job depends on the successful completion of the 'build-bicep' job.
  deploy-bicep:
    needs: build-bicep
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # Checks out a copy of your repository on the ubuntu-latest runner.
      - name: Checkout repository
        uses: actions/checkout@v2

      # Downloads the previously uploaded JSON artifact to the current runner.
      - name: Download Main Bicep JSON
        uses: actions/download-artifact@v2
        with:
          name: main-json
          path: ./infra/

      # Logs into Azure using the Azure CLI and the provided credentials.
      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Deploys the ARM template (JSON) to Azure using the provided parameters.
      - name: Deploy Main Bicep
        env:
          # Environment variables that are used in the deployment command below.
          REPOSITORY_URL: ${{ secrets.REPOSITORY_URL }}
          BRANCH: ${{ secrets.BRANCH }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          LOCATION: ${{ secrets.LOCATION }}
          REPOSITORY_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
          SWA_NAME: ${{ secrets.SWA_NAME }}
          SWA_SKU: ${{ secrets.SWA_SKU }}
          STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
          
        run: |
          az deployment group create --resource-group $AZURE_RESOURCE_GROUP \
            --template-file ./infra/main.json \
            --parameters \
            repositoryUrl=$REPOSITORY_URL \
            branch=$BRANCH \
            location=$LOCATION \
            repositoryToken=$REPOSITORY_TOKEN \
            swaName=$SWA_NAME \
            swaSku=$SWA_SKU
          # Checks the exit status of the last command (az deployment group create). If it failed, it echoes an error message.
          if [ $? -ne 0 ]; then
            echo "Error deploying the Bicep JSON!"
            exit 1
          fi

      # Logs out of Azure to end the session.
      - name: Logout of Azure CLI
        run: az logout

  upload-to-blob:
    needs: [build-bicep, deploy-bicep]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload Assets to Azure Blob Storage
        env:
          STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}

        run: |
          for file in /assets/*; do
            az storage blob upload \
              --account-name $STORAGE_ACCOUNT_NAME \
              --container-name mycontainer \
              --name "$(basename "$file")" \
              --file "$file"
          done

      - name: Logout of Azure CLI
        run: az logout

  replace-placeholders:
    needs: upload-to-blob  # This ensures that files are uploaded before placeholders are replaced
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Update Asset Placeholders
        env:
          STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        
        run: |
          python update-placeholders.py  # Make sure the script path is correct